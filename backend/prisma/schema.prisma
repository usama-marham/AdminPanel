generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// (1,  'IN_PROCESS',               )
/// (2,  'SCHEDULED',                ),
/// (3,  'CANCELLED',                ),
/// (4,  'DOCTOR_NOT_RESPONDING',    ),
/// (5,  'DATA_INCORRECT',           ),
/// (6,  'DOCTOR_NOT_AVAILABLE',     ),
/// (7,  'INQUIRY',                  ),
/// (8,  'SHOWED_UP',                ),
/// (9,  'OTHER',                    ),
/// (10, 'PATIENT_NO_SHOW',          ),
/// (11, 'PATIENT_NOT_RESPONDING',   ),
/// (12, 'DOCTOR_NO_SHOW',           ),
/// (13, 'CASE_DECLINED',            ),
/// (14, 'DOCTOR_NO_SHOW_ALT',       ),
/// (15, 'POWERED_OFF',              ),
/// (16, 'NO_SHOW_BILLING',          ),
/// (17, 'DUPLICATE',                ),
/// (18, 'CANCELLED_BY_DOCTOR',      );
model AppointmentStatus {
  id          Int       @id @map("id") @db.TinyInt
  title       String    @db.VarChar(100)
  statusKey   String    @unique @map("status_key") @db.VarChar(50)
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("appointment_statuses")
}

model PaymentStatus {
  id          Int       @id @map("id") @db.TinyInt
  title       String    @db.VarChar(100)
  statusKey   String    @unique @map("status_key") @db.VarChar(50)
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("payment_status")
}

model AppointmentType {
  id          Int       @id @map("id") @db.TinyInt
  title       String    @db.VarChar(100)
  statusKey   String    @unique @map("status_key") @db.VarChar(50)
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("appointment_types")
}

model AppointmentProbability {
  id          Int       @id @map("id") @db.TinyInt
  name        String    @db.VarChar(100)
  statusKey   String    @unique @map("status_key") @db.VarChar(50)
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("appointment_probabilities")
}

model Category {
  id                          BigInt    @id @default(autoincrement())
  name                        String    @db.VarChar(255)
  isOnboardingPaymentRequired Boolean   @default(false) @map("is_onboarding_payment_required")
  createdAt                   DateTime  @default(now()) @map("created_at")
  updatedAt                   DateTime? @map("updated_at")
  deletedAt                   DateTime? @map("deleted_at")

  @@map("categories")
}

model Speciality {
  id             BigInt       @id @default(autoincrement())
  name           String       @db.VarChar(255)
  slug           String       @unique @db.VarChar(255)
  parentId       BigInt?      @map("parent_id")
  position       Int?         @default(0)
  displayContent Json?        @map("display_content")
  media          Json?
  seo            Json?
  faqs           Json?
  actions        Json?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime?    @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  doctorsMain    Doctor[]
  parent         Speciality?  @relation("SpecialityToSpeciality", fields: [parentId], references: [id])
  children       Speciality[] @relation("SpecialityToSpeciality")

  @@index([parentId], map: "specialities_parent_id_fkey")
  @@map("specialities")
}

model Doctor {
  id               BigInt             @id @default(autoincrement())
  name             String?            @db.VarChar(120)
  pmdcNumber       String?            @unique @map("pmdc_number") @db.VarChar(50)
  email            String?            @db.VarChar(255)
  phone            String?            @db.VarChar(50)
  bio              String?            @db.Text
  degree           String?            @db.VarChar(1000)
  qualifications   Json?              @default(dbgenerated("(json_array())"))
  experiences      Json?              @default(dbgenerated("(json_array())"))
  publications     Json?              @default(dbgenerated("(json_array())"))
  profilePicUrl    String?            @map("profile_pic_url") @db.VarChar(1024)
  dateOfExperience DateTime?          @map("date_of_experience") @db.Date
  mainSpecialityId BigInt             @map("main_speciality_id")
  categoryId       BigInt?            @map("category_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  deletedAt        DateTime?          @map("deleted_at")
  practices        DoctorPractice[]
  specialties      DoctorSpeciality[]
  mainSpeciality   Speciality         @relation(fields: [mainSpecialityId], references: [id])
  reviews          Review[]           @relation("DoctorReviews")
  users            User[]

  @@index([name])
  @@index([email])
  @@index([phone])
  @@index([mainSpecialityId], map: "doctors_main_speciality_id_fkey")
  @@map("doctors")
}

model DoctorSpeciality {
  id           BigInt    @id @default(autoincrement())
  doctorId     BigInt    @map("doctor_id")
  specialityId BigInt    @map("speciality_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  doctor       Doctor    @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, specialityId], map: "uniq_doctor_speciality")
  @@map("doctor_speciality")
}

model Hospital {
  id        BigInt           @id @default(autoincrement())
  name      String?          @db.VarChar(500)
  city      String?          @db.VarChar(255)
  address   String?          @db.Text
  lat       Float?
  lng       Float?
  phone     String?          @db.Text
  type      Int?
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  deletedAt DateTime?        @map("deleted_at")
  practices DoctorPractice[]

  @@index([city])
  @@map("hospitals")
}

model DoctorPractice {
  id                         BigInt            @id @default(autoincrement())
  doctorId                   BigInt            @map("doctor_id")
  hospitalId                 BigInt?           @map("hospital_id")
  practiceSlug               String?           @map("practice_slug")
  profileSlug                String?           @map("profile_slug")
  consultationFee            Int?              @map("consultation_fee")
  discountFee                Int?              @map("discount_fee")
  appointmentPolicy          Json?             @map("appointment_policy")
  patientsPerHour            Int?              @map("patients_per_hour")
  avgTimePerPatientMinutes   Int?              @map("avg_time_per_patient_minutes")
  onPanel                    Boolean           @default(false) @map("on_panel")
  consultancyReferralPercent Int?              @default(0) @map("consultancy_referral_percent")
  activeFrom                 DateTime?         @map("active_from") @db.Date
  activeTo                   DateTime?         @map("active_to") @db.Date
  createdAt                  DateTime          @default(now()) @map("created_at")
  updatedAt                  DateTime          @updatedAt @map("updated_at")
  deletedAt                  DateTime?         @map("deleted_at")
  allowsDirectBooking        Boolean           @default(false) @map("allows_direct_booking")
  paNumber                   String?           @map("pa_number")
  slots                      AppointmentSlot[]
  avails                     Availability[]
  doctor                     Doctor            @relation(fields: [doctorId], references: [id])
  hospital                   Hospital?         @relation(fields: [hospitalId], references: [id])

  @@index([doctorId])
  @@index([hospitalId])
  @@index([profileSlug], map: "idx_doctor_practices_profile_slug")
  @@map("doctor_practices")
}

model Availability {
  id                  BigInt         @id @default(autoincrement())
  doctorPracticeId    BigInt         @map("doctor_practice_id")
  weekday             Int
  startTime           DateTime?      @map("start_time") @db.Time(0)
  endTime             DateTime?      @map("end_time") @db.Time(0)
  slotDurationMinutes Int            @map("slot_duration_minutes")
  isActive            Boolean        @default(true) @map("is_active")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  deletedAt           DateTime?      @map("deleted_at")
  practice            DoctorPractice @relation(fields: [doctorPracticeId], references: [id], onDelete: Cascade)

  @@index([doctorPracticeId, weekday])
  @@map("availabilities")
}

model AppointmentSlot {
  id               BigInt         @id @default(autoincrement())
  doctorPracticeId BigInt         @map("doctor_practice_id")
  slotDate         DateTime       @map("slot_date") @db.Date
  startTs          DateTime       @map("start_ts")
  endTs            DateTime       @map("end_ts")
  slotStatus       Int            @default(0) @map("slot_status")
  holdUntil        DateTime?      @map("hold_until")
  slotVersion      Int            @default(1) @map("slot_version")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  deletedAt        DateTime?      @map("deleted_at")
  practice         DoctorPractice @relation(fields: [doctorPracticeId], references: [id], onDelete: Cascade)

  @@index([doctorPracticeId, slotDate, slotStatus, startTs], map: "idx_slots_practice_date_status_start")
  @@map("appointment_slots")
}

model Appointment {
  id                  BigInt    @id @default(autoincrement())
  uuid                String    @unique @default(uuid()) @db.Char(36)
  doctorPracticeId    BigInt?   @map("doctor_practice_id")
  patientId           BigInt?   @map("patient_id")
  userId              BigInt?   @map("user_id")
  fee                 Int?
  discount            Int?
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  deletedAt           DateTime? @map("deleted_at")
  appointmentDateTime DateTime? @map("appointment_datetime") @db.DateTime(0)
  appointmentStatusId Int?      @default(1) @map("appointment_status_id")
  appointmentTypeId   Int?      @default(1) @map("appointment_type_id")
  oldDbId             BigInt?   @unique @map("old_db_id")
  paymentStatusId     Int?      @map("payment_status_id")
  probabilityId       Int?      @map("probability_id")
  patient             Patient?  @relation(fields: [patientId], references: [id])
  user                User?     @relation(fields: [userId], references: [id])

  @@index([doctorPracticeId, appointmentStatusId, createdAt], map: "idx_apps_practice_status_created")
  @@index([patientId])
  @@index([appointmentDateTime], map: "idx_appt_datetime")
  @@index([patientId, appointmentDateTime], map: "idx_appt_patient_time")
  @@index([doctorPracticeId, appointmentDateTime], map: "idx_appt_doctor_time")
  @@index([appointmentStatusId, appointmentDateTime], map: "idx_appt_status_time")
  @@index([userId], map: "appointments_user_id_fkey")
  @@map("appointments")
}

model Review {
  id                BigInt            @id @default(autoincrement())
  serviceId         BigInt            @map("service_id")
  serviceType       ReviewServiceType @map("service_type")
  doctorId          BigInt?           @map("doctor_id")
  rating            Int               @db.TinyInt
  reviewText        String?           @map("review_text")
  isPinned          Boolean           @default(false) @map("is_pinned")
  publishedBy       BigInt            @map("published_by")
  publishedAt       DateTime?         @map("published_at")
  overallExperience ReviewExperience? @map("overall_experience")
  isPublished       Boolean           @default(false) @map("is_published")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  deletedAt         DateTime?         @map("deleted_at")
  doctor            Doctor?           @relation("DoctorReviews", fields: [doctorId], references: [id])

  @@index([serviceId, serviceType], map: "idx_service")
  @@index([doctorId], map: "idx_doctor")
  @@index([publishedBy], map: "idx_published")
  @@map("reviews")
}

model User {
  id            BigInt        @id @default(autoincrement())
  email         String        @unique @db.VarChar(255)
  username      String?       @unique @db.VarChar(100)
  passwordHash  String        @map("password_hash") @db.VarChar(255)
  fullName      String?       @map("full_name") @db.VarChar(255)
  phone         String?       @db.VarChar(50)
  phoneVerified Boolean       @default(false) @map("phone_verified")
  userTypeId    Int           @map("user_type_id") @db.SmallInt
  isActive      Boolean       @default(true) @map("is_active")
  isSystem      Boolean       @default(false) @map("is_system")
  doctorId      BigInt?       @map("doctor_id")
  lastSeenAt    DateTime?     @map("last_seen_at") @db.DateTime(0)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  apps          Appointment[]
  doctor        Doctor?       @relation(fields: [doctorId], references: [id])
  type          UserType      @relation(fields: [userTypeId], references: [id])

  @@index([email], map: "idx_users_email")
  @@index([phone], map: "idx_users_phone")
  @@index([userTypeId], map: "idx_users_user_type")
  @@index([doctorId], map: "users_doctor_id_fkey")
  @@map("users")
}

model UserType {
  id       Int    @id @db.SmallInt
  typeName String @unique @map("type_name") @db.VarChar(50)
  users    User[]

  @@map("user_types")
}

model Patient {
  id                BigInt        @id @default(autoincrement())
  uuid              String        @default(uuid()) @db.Char(36)
  firstName         String        @map("first_name") @db.VarChar(120)
  lastName          String        @map("last_name") @db.VarChar(120)
  fullName          String?       @map("full_name") @db.VarChar(255)
  gender            String?       @db.VarChar(30)
  dateOfBirth       DateTime?     @map("date_of_birth") @db.Date
  email             String?       @db.VarChar(255)
  phone             String?       @db.VarChar(50)
  phoneVerified     Boolean       @default(false) @map("phone_verified")
  addressLine1      String?       @map("address_line1")
  addressLine2      String?       @map("address_line2")
  city              String?       @db.VarChar(128)
  state             String?       @db.VarChar(128)
  postalCode        String?       @map("postal_code") @db.VarChar(32)
  country           String?       @db.VarChar(64)
  emergencyContacts Json          @map("emergency_contacts")
  consentEmail      Boolean       @default(true) @map("consent_email")
  consentSms        Boolean       @default(true) @map("consent_sms")
  utmSource         String?       @map("utm_source") @db.VarChar(128)
  utmMedium         String?       @map("utm_medium") @db.VarChar(128)
  utmCampaign       String?       @map("utm_campaign") @db.VarChar(128)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  deletedAt         DateTime?     @map("deleted_at")
  userId            BigInt?       @map("user_id")
  visitorSource     String?       @map("visitor_source") @db.VarChar(128)
  apps              Appointment[]

  @@index([phone])
  @@index([fullName])
  @@index([userId])
  @@map("patients")
}

/// Polymorphic message log: one table for all messages (doctor, patient, pharmacy, etc.)
model MessageLog {
  id            BigInt                @id @default(autoincrement())
  /// Polymorphic reference to the subject of this message
  serviceType   MessageServiceType    @map("service_type")
  serviceId     BigInt                @map("service_id")
  /// Optional direct links (handy joins; not mandatory)
  appointmentId BigInt?               @map("appointment_id")
  userId        BigInt?               @map("user_id")
  /// Channel + direction
  channel       MessageChannel
  direction     MessageDirection
  /// Participants (addresses/ids used on the channel)
  toAddress     String?               @map("to_address")
  fromAddress   String?               @map("from_address")
  /// Content (see notes below about PII/PHI)
  body          String?               @db.Text
  bodySha256    String?               @map("body_sha256") @db.Char(64)
  templateKey   String?               @map("template_key") @db.VarChar(100)
  /// Provider correlation
  provider      String?               @db.VarChar(100)
  providerMsgId String?               @map("provider_msg_id")
  correlationId String?               @map("correlation_id")
  /// Delivery tracking
  status        MessageDeliveryStatus @default(QUEUED)
  queuedAt      DateTime?             @map("queued_at")
  sentAt        DateTime?             @map("sent_at")
  deliveredAt   DateTime?             @map("delivered_at")
  readAt        DateTime?             @map("read_at")
  failedAt      DateTime?             @map("failed_at")
  errorCode     String?               @map("error_code") @db.VarChar(100)
  errorMessage  String?               @map("error_message") @db.VarChar(255)
  /// Free-form machine metadata (headers/payload snapshots, webhook dumps, etc.)
  meta          Json?                 @map("meta")
  /// Timestamps
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")
  deletedAt     DateTime?             @map("deleted_at")

  @@index([serviceType, serviceId, createdAt], map: "idx_msg_service_time")
  @@index([appointmentId, createdAt], map: "idx_msg_appt_time")
  @@index([userId, createdAt], map: "idx_msg_user_time")
  @@index([channel, direction, createdAt], map: "idx_msg_channel_dir_time")
  @@index([provider, providerMsgId], map: "idx_msg_provider")
  @@index([correlationId], map: "idx_msg_corr")
  @@index([toAddress], map: "idx_msg_to_addr")
  @@map("message_logs")
}

/// *
///  * =========================
///  * Enums (for reviews)
///  * =========================
enum ReviewServiceType {
  doctor
  hospital
  lab
  medicine
  online_consultation
  subscription
}

enum ReviewExperience {
  positive
  negative
  neutral
}

/// Which entity the message is about (polymorphic target)
enum MessageServiceType {
  PATIENT
  DOCTOR
  PHARMACY
  HOSPITAL
  LAB
  APPOINTMENT
  CORPORATE
  OTHER
}

/// How the message was sent
enum MessageChannel {
  SMS
  WHATSAPP
  EMAIL
  PUSH
  IN_APP
  IVR
  CALL
  OTHER
}

/// Direction of the message
enum MessageDirection {
  INBOUND
  OUTBOUND
}

/// Delivery lifecycle status
enum MessageDeliveryStatus {
  QUEUED
  SENT
  DELIVERED
  READ
  FAILED
  BOUNCED
  UNKNOWN
}
